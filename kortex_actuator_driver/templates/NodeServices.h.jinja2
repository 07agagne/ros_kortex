/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2018 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#ifndef _KORTEX_{{packageName}}SERVICES_H_
#define _KORTEX_{{packageName}}SERVICES_H_

#include "ros/ros.h"

#include <string>
#include <iostream>
#include <cstdio>
#include <iostream>
#include <chrono>

#include <Frame.pb.h>
#include <Session.pb.h>
{%- for package in detailedPackages %}
#include <{{package.filename}}.pb.h>
{%- endfor %}

#include <KDetailedException.h>
#include <HeaderInfo.h>

#include <TransportClientUdp.h>
#include <RouterClient.h>

{%- for package in detailedPackages %}
{%- if package.HasRPC == 1 %}
#include <{{package.name}}ClientRpc.h>
{%- endif %}
{%- endfor %}
#include <SessionClientRpc.h>
#include <SessionManager.h>

{%- for package in detailedPackages %}
{%- for method in package.service.method %}
#include "kortex_actuator_driver/{{method.name}}.h"
{%- endfor %}
{%- endfor %}
#include "kortex_actuator_driver/KortexError.h"
#include "kortex_actuator_driver/SetDeviceID.h"
#include "kortex_actuator_driver/SetApiOptions.h"
#include "kortex_actuator_driver/SetCyclicStatus.h"
#include "kortex_actuator_driver/GetCyclicStatus.h"
#include "kortex_actuator_driver/ApiOptions.h"
#include "kortex_actuator_driver/CyclicStatus.h"

using namespace std;
using namespace Kinova::Api;
{%- for package in detailedPackages %}
using namespace {{package.namespace}};
{%- endfor %}

class Actuator_Services
{
    public:
        Actuator_Services(char* ip, ros::NodeHandle& n, uint32_t device_id);
        bool SetDeviceID(kortex_actuator_driver::SetDeviceID::Request  &req, kortex_actuator_driver::SetDeviceID::Response &res);
        bool SetApiOptions(kortex_actuator_driver::SetApiOptions::Request  &req, kortex_actuator_driver::SetApiOptions::Response &res);
        bool GetCyclicStatus(kortex_actuator_driver::GetCyclicStatus::Request  &req, kortex_actuator_driver::GetCyclicStatus::Response &res);
        bool SetCyclicStatus(kortex_actuator_driver::SetCyclicStatus::Request  &req, kortex_actuator_driver::SetCyclicStatus::Response &res);
        bool IsCyclicActive();
{% for package in detailedPackages %}
{%- for method in package.service.method %}
{%- if 'Topic' in method.name %}
        bool OnNotification{{method.name}}(kortex_actuator_driver::{{method.name}}::Request  &req, kortex_actuator_driver::{{method.name}}::Response &res);
        void cb_{{method.name}}({{method.name|replace("Topic", "")}}Notification notif);
{%- else %}
        bool {{method.name}}(kortex_actuator_driver::{{method.name}}::Request  &req, kortex_actuator_driver::{{method.name}}::Response &res);
{%- endif %}
{%- endfor %}
{% endfor %}

private:
    	TransportClientUdp* m_transport;
    	RouterClient*       m_router;
        {% for package in detailedPackages %}
        {%- if package.HasRPC == 1 %}
        {{package.name}}Client*   m_{{package.name|lower}};
        {%- endif -%}
        {% endfor %}
        uint32_t m_CurrentDeviceID;
        RouterClientSendOptions m_apiOptions;

        SessionManager* m_SessionManager;
        bool m_cyclicActive = false;

        ros::NodeHandle m_n;
        ros::Publisher m_pub_Error;

        {%- for package in detailedPackages %}
        {%- for method in package.service.method %}
        {%- if 'Topic' in method.name %}
        ros::Publisher m_pub_{{method.name}};
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
};
#endif

