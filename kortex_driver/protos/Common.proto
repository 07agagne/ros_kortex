/*
 * KINOVA (R) KORTEX (TM)
 *
 * Copyright (c) 2018 Kinova inc. All rights reserved.
 *
 * This software may be modified and distributed
 * under the terms of the BSD 3-Clause license.
 *
 * Refer to the LICENSE file for details.
 *
 */

syntax = "proto3";

package Kinova.Api.Common;

// List of admissible device types
enum DeviceTypes {
    UNSPECIFIED_DEVICE_TYPE = 0;    // Unspecified device type
    BASE = 1;                       // Base module
    VISION = 2;                     // Vision module
    BIG_ACTUATOR = 3;               // Big actuator module
    SMALL_ACTUATOR = 4;             // Small actuator module
    INTERCONNECT = 5;               // Interconnect module
    GRIPPER = 6;                    // Gripper module
}

// Identifies a device
message DeviceHandle {
    DeviceTypes device_type = 1;    // Device type
    uint32 device_identifier = 2;   // Unique device identifier (used with other services)
    uint32 order = 3;               // Unique value indicating the order of that device versus the others to facilitate representation
}

// List of admissible safety statuses
enum SafetyStatusValue {
    SAFETY_STATUS_UNSPECIFIED = 0;  // Unspecified safety status
    SAFETY_STATUS_WARNING = 1;      // Warning safety reached
    SAFETY_STATUS_ERROR = 2;        // Error safety reached
    SAFETY_STATUS_NORMAL = 3;       // Safety is off
}

// List of admissible permissions. Used as bitfields
enum Permission {
    NO_PERMISSION = 0;      // No permission
    READ_PERMISSION = 1;    // Read permission. Refers to an entity that can be read
    UPDATE_PERMISSION = 2;  // Update permission. Refers to an entity that can be modified
    DELETE_PERMISSION = 4;  // Delete permission. Refers to an entity that can be deleted
}

// List of admissible notification types
enum NotificationType {
    NOTIFICATION_TYPE_UNSPECIFIED = 0;  // Unspecified notification
    NOTIFICATION_TYPE_THRESHOLD = 1;    // Threshold notification. Refers to a notification sent beyond a specific threshold (future)
    NOTIFICATION_TYPE_FIX_RATE = 2;     // Fix rate notification. Refers to a notification sent at a predetermined fix rate (future)
    NOTIFICATION_TYPE_EVENT = 3;        // Event type notification. Refers to a notification sent in response to an event
}

// List of admissible units used throughout API methods
enum Unit {
    UNSPECIFIED_UNIT = 0;       // Unspecified unit
    CELSIUS = 1;                // Degree Celsius
    AMPERE = 2;                 // Ampere
    VOLT = 3;                   // Volt
    METER_PER_SECOND = 4;       // Meter per second
    DEGREE_PER_SECOND = 5;      // Degree per second
    METER_PER_SECOND_2 = 6;     // Meter per second squared
    DEGREE_PER_SECOND_2 = 7;    // Degree per second squared
    NEWTON = 8;                 // Newton
    NEWTON_METER =9;            // Newton * meter
    KILOGRAM = 10;              // Kilogram
    DEGREE = 11;                // Degree
    TICK = 12;                  // Tick
    DEGREE_PER_MILLISECOND = 13;// Degre per millisecond
}

// Message used when no information needs to be exchanged between client application and robot, and vice versa
message Empty {
}

// Specifies options associated to a notification
message NotificationOptions {
    NotificationType type = 1;  // Type of notification
    uint32 rate_m_sec = 2;      // Rate value (in meters per second) (if applicable)
    float threshold_value = 3;  // Threshold value (if applicable)
}

// Identifies a safety
message SafetyHandle {
    uint32 identifier = 1; // Safety identifier
}

// Identifies a notification
message NotificationHandle {
    uint32 identifier = 1; // Notification identifier
}

// Message that contains a safety event
message SafetyNotification {
    SafetyHandle safety_handle = 1;     // Safety handle
    SafetyStatusValue value = 2;        // New safety status
    Timestamp timestamp = 3;            // Event timestamp
    UserProfileHandle user_handle = 4;  // User that caused the safety event
    Connection connection = 5;          // Connection that caused the safety event
}

// Timestamp based on Epoch (00:00:00 Thursday, January 1, 1970)
message Timestamp {
    uint32 sec = 1;     // Number of seconds that have elapsed since Epoch
    uint32 usec = 2;    // Number of microseconds that have elapsed since the last second (0-999999)
}

// Identifies a user profile
message UserProfileHandle {
    uint32 identifier = 1;  // User profile identifier
    fixed32 permission = 2; // Must use 'Permission' as bitwise
}

// Idenfities a connection
message Connection {
    UserProfileHandle user_handle = 1;  // User profile handle, or set to zero if no user logged in
    string connection_information = 2;  // Connection info (e.g. IP address with port number)
    uint32 connection_identifier = 3;   // Connection identifier
}

// List of admissible arm states
enum ArmState
{
    ARMSTATE_UNSPECIFIED                    = 0;    // Unspecified arm state
    ARMSTATE_BASE_INITIALIZATION            = 1;    // Cannot be reported as the Base initialization must be completed before allowing user connection
    ARMSTATE_IDLE                           = 2;    // Base initialization succeeded
    ARMSTATE_INITIALIZATION                 = 3;    // Arm is being initialized
    ARMSTATE_IN_FAULT                       = 4;    // Arm is in fault
    ARMSTATE_MAINTENANCE                    = 5;    // Arm is in maintenance
    ARMSTATE_SERVOING_LOW_LEVEL             = 6;    // Arm is in low-level servoing mode
    ARMSTATE_SERVOING_READY                 = 7;    // Arm is ready to be controlled
    ARMSTATE_SERVOING_PLAYING_SEQUENCE      = 8;    // Arm is currently being controlled via a sequence
    ARMSTATE_SERVOING_MANUALLY_CONTROLLED   = 9;    // Arm is currently being controlled manually
    ARMSTATE_RESERVED                       = 255;  // For debugging, this state must never be reported outside the base. this means that a state is not mapped correctly
}