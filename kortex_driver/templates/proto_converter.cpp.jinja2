/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2018 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#include "{{currentPackageName|lower}}_proto_converter.h"
{% if 'Common' not in currentPackageName %}
#include "common_proto_converter.h"
{% endif %}

{% for detailed_message in item -%}
int ToProtoData(kortex_driver::{{detailed_message.message.name}} input, {{detailed_message.message.name}} *output)
{
	{%- for field in detailed_message.message.field %}
	{%- if not field.HasField("oneof_index") -%}
	{%- if field.label == 3 %} {# Si c'est un repeated #}
	{%- if field.type == 11 %}
	output->clear_{{field.name|lower}}();
	for(int i = 0; i < input.{{field.name}}.size(); i++)
	{
		ToProtoData(input.{{field.name}}[i], output->add_{{field.name|lower}}());
	}
	{%- else %}
	output->clear_{{field.name|lower}}();
	for(int i = 0; i < input.{{field.name|lower}}.size(); i++)
	{
		output->add_{{field.name|lower}}(input.{{field.name|lower}}[i]);
	}	
	{% endif -%}
	{% else -%}
	{%- if field.type == 11 %}
	ToProtoData(input.{{field.name}}, output->mutable_{{field.name}}());
	{%- elif field.type == 14 %}{# ENUM #}
	{%- set list1 = field.type_name.split('.') -%} {# Cette ligne sert Ã  enlever les namespace dans le nom du type #}
	output->set_{{field.name}}(({{field.type_name|replace(".", "", 1)|replace(".", "::")}})input.{{field.name}}); 
	{%- elif field.type == 12 %}
	output->set_{{field.name}}(std::string(input.{{field.name}}.begin(), input.{{field.name}}.end()));
	{%- else %}
	output->set_{{field.name}}(input.{{field.name}});
	{%- endif -%}
	{%- endif -%}
	{%- endif -%}
	{%- endfor -%}
	
	{% if detailed_message.HasOneOf == "true" %}
	
	{% for field in detailed_message.message.field %}
	{%- if field.HasField("oneof_index") -%}
	if(input.oneof_{{detailed_message.message.ListFields()[-1][1][0].name}}.{{field.name}}.size() > 0)
	{
		{% if field.type == 11 -%}
		ToProtoData(input.oneof_{{detailed_message.message.ListFields()[-1][1][0].name}}.{{field.name}}[0], output->mutable_{{field.name}}());
		{%- elif field.type == 14 %}
		{%- set list1 = field.type_name.split('.') -%} 
		output->set_{{field.name}}(({{list1[4]}})input.oneof_{{detailed_message.message.ListFields()[-1][1][0].name}}.{{field.name}}[0]);
		{%- else %}
		output->set_{{field.name}}(input.oneof_{{detailed_message.message.ListFields()[-1][1][0].name}}.{{field.name}}[0]);
		{%- endif %}
	}
	{% endif %}
	{%- endfor -%}
	{% endif %}

	return 0;
}
{% endfor %}
