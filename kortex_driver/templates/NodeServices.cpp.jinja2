/*
* KINOVA (R) KORTEX (TM)
*
* Copyright (c) 2018 Kinova inc. All rights reserved.
*
* This software may be modified and distributed under the
* terms of the BSD 3-Clause license.
*
* Refer to the LICENSE file for details.
*
*/

/*
 * This file has been auto-generated and should not be modified.
 */
 
#include "node.h"
{% for package in detailedPackages %}
{%- if package.HasMessage == 1 -%}
#include "{{package.filename|lower}}_ros_converter.h"
#include "{{package.filename|lower}}_proto_converter.h"
{%- endif %}
{% endfor -%}

BaseServices::BaseServices(char* ip, ros::NodeHandle& n) : m_n(n)
{
	m_transport = new TransportClientUdp();
	m_transport->connect(ip, 10000);

	m_router = new RouterClient(m_transport, [](KError err) { cout << "_________ callback error _________" << err.toString(); });
	m_CurrentDeviceID = 0;
	m_apiOptions.timeout_ms = 3000;
{% for package in detailedPackages %}
	{%- if package.HasRPC == 1 %}
	m_{{package.name|lower}} = new {{package.name}}::{{package.name}}Client(m_router);
	{%- endif -%}

{% endfor %}
	m_SessionManager = new SessionManager(m_router);
	auto createSessionInfo = Kinova::Api::Session::CreateSessionInfo();

	createSessionInfo.set_username("admin");
	createSessionInfo.set_password("admin");
	createSessionInfo.set_session_inactivity_timeout(35000);

	m_SessionManager->CreateSession(createSessionInfo);
	std::cout << "\nSession Created\n";

	m_pub_Error = m_n.advertise<kortex_driver::KortexError>("KortexError", 1000);
{%- for package in detailedPackages -%}
{%- for method in package.service.method -%}
{%- if 'Topic' in method.name %}
	m_pub_{{method.name}} = m_n.advertise<kortex_driver::{{method.name|replace("Topic", "")}}Notification>("{{method.name}}", 1000);
{%- endif -%}
{%- endfor -%}
{%- endfor -%}

	std::this_thread::sleep_for(std::chrono::milliseconds(2000));
}

bool BaseServices::SetDeviceID(kortex_driver::SetDeviceID::Request  &req, kortex_driver::SetDeviceID::Response &res)
{
	m_CurrentDeviceID = req.device_id;

	return true;
}

bool BaseServices::SetApiOptions(kortex_driver::SetApiOptions::Request  &req, kortex_driver::SetApiOptions::Response &res)
{
	m_apiOptions.timeout_ms = req.input.timeout_ms;

	return true;
}

{% for package in detailedPackages %}
{% for method in package.service.method %}
{%- if 'Topic' in method.name %}
bool BaseServices::OnNotification{{method.name}}(kortex_driver::OnNotification{{method.name}}::Request  &req, kortex_driver::OnNotification{{method.name}}::Response &res)
{%- else %}
bool BaseServices::{{method.name}}(kortex_driver::{{method.name}}::Request  &req, kortex_driver::{{method.name}}::Response &res)
{%- endif %}
{
	{%- set splitInputTypeName = method.input_type.split('.') -%}
	{% set splitOutputTypeName = method.output_type.split('.') %}
	{{splitInputTypeName[4]}} input;
	{%- if not method.input_type.split('.')[4] == "Empty" %}
	ToProtoData(req.input, &input);
	{%- endif %}
	{{splitOutputTypeName[4]}} output;
	kortex_driver::KortexError result_error;
	
	try
	{
		{%- if not method.output_type.split('.')[4] == "Empty" %}
		{%- if not method.input_type.split('.')[4] == "Empty" %}
		{%- if 'Topic' in method.name %}
		std::function< void ({{package.name}}::{{method.name|replace("Topic", "")}}Notification) > callback = std::bind(&BaseServices::cb_{{method.name}}, this, std::placeholders::_1);
		output = m_{{package.name|lower}}->OnNotification{{method.name}}(callback, input);
		{%- else %}
		output = m_{{package.name|lower}}->{{method.name}}(input, m_CurrentDeviceID, m_apiOptions);
		{%- endif %}
		{%- else %}
		output = m_{{package.name|lower}}->{{method.name}}(m_CurrentDeviceID, m_apiOptions);
		{%- endif %}
		{%- else %}
		{%- if not method.input_type.split('.')[4] == "Empty" %}
		m_{{package.name|lower}}->{{method.name}}(input, m_CurrentDeviceID, m_apiOptions);
		{%- else %}
		m_{{package.name|lower}}->{{method.name}}(m_CurrentDeviceID, m_apiOptions);
		{%- endif %}
		{%- endif %}
	}
	catch (KDetailedException& ex)


	{
		result_error.subCode = ex.getErrorInfo().getError().error_sub_code();
		result_error.code = ex.getErrorInfo().getError().error_code();
		result_error.description = ex.toString();
		m_pub_Error.publish(result_error);
		ROS_INFO("Kortex exception");
		ROS_INFO("KINOVA exception error code: %d\n", ex.getErrorInfo().getError().error_code());
		ROS_INFO("KINOVA exception error sub code: %d\n", ex.getErrorInfo().getError().error_sub_code());
		ROS_INFO("KINOVA exception description: %s\n", ex.what());
		return false;
	}
	catch (std::runtime_error& ex2)
	{
		return false;
	}
	{%- if not method.output_type.split('.')[4] == "Empty" %}
	ToRosData(output, res.output);
	{%- endif %}
	return true;
}
{%- if 'Topic' in method.name %}
void BaseServices::cb_{{method.name}}({{package.name}}::{{method.name|replace("Topic", "")}}Notification notif)
{
	kortex_driver::{{method.name|replace("Topic", "")}}Notification ros_msg;
	ToRosData(notif, ros_msg);
	m_pub_{{method.name}}.publish(ros_msg);
}
{%- endif %}
{% endfor -%}
{% endfor -%}