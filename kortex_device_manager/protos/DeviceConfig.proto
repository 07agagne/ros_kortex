syntax = "proto3";

import public "Common.proto";

package Kinova.Api.DeviceConfig;

/**
* Service to get and set device configuration information
*/
service DeviceConfig {//@PROXY_ID=9 @ERROR=Kinova.Api.Error

    // Returns the run mode for the device
    rpc GetRunMode (Kinova.Api.Common.Empty) returns (RunMode); //@RPC_ID=1
    
    // Sets the run mode for the device
    rpc SetRunMode (RunMode) returns (Kinova.Api.Common.Empty); //@RPC_ID=2
    
    // Returns the type for the device
    rpc GetDeviceType (Kinova.Api.Common.Empty) returns (DeviceType); //@RPC_ID=3
    
    // Returns the device firmware version
    rpc GetFirmwareVersion (Kinova.Api.Common.Empty) returns (FirmwareVersion); //@RPC_ID=4
    
    // Returns the device bootloader version 
    rpc GetBootloaderVersion (Kinova.Api.Common.Empty) returns (BootloaderVersion); //@RPC_ID=5
    
    // Returns the device model number
    rpc GetModelNumber (Kinova.Api.Common.Empty) returns (ModelNumber); //@RPC_ID=6
    
    // Returns the device part number
    rpc GetPartNumber (Kinova.Api.Common.Empty) returns (PartNumber);	//@RPC_ID=7
    
    // Returns the device serial number
    rpc GetSerialNumber (Kinova.Api.Common.Empty) returns (SerialNumber); //@RPC_ID=8
    
    // Returns the device MAC address
    rpc GetMACAddress (Kinova.Api.Common.Empty) returns (MACAddress); //@RPC_ID=9
    
    // Returns the device IPv4 settings
    rpc GetIPv4Settings (Kinova.Api.Common.Empty) returns (IPv4Settings); //@RPC_ID=10
    
    // Configures the device IPv4 settings
    rpc SetIPv4Settings (IPv4Settings) returns (Kinova.Api.Common.Empty); //@RPC_ID=11
    
    // Returns the device part number revision
    rpc GetPartNumberRevision (Kinova.Api.Common.Empty) returns (PartNumberRevision);	//@RPC_ID=12
    
    // Returns the result on the device power on self test
    rpc GetPowerOnSelfTestResult (Kinova.Api.Common.Empty) returns (PowerOnSelfTestResult); //@RPC_ID=13
    
    // Sends a request to the device to reboot
    rpc RebootRequest (RebootRqst) returns (Kinova.Api.Common.Empty); //@RPC_ID=14
    
    //Enables (disable) the specified safety
    rpc SetSafetyEnable (SafetyEnable) returns (Kinova.Api.Common.Empty); //@RPC_ID=15
    
    //Sets the Error threshold for the specified safety
    rpc SetSafetyErrorThreshold (SafetyThreshold) returns (Kinova.Api.Common.Empty); //@RPC_ID=16
    
    //Sets the Warning threshold for the specified safety
    rpc SetSafetyWarningThreshold (SafetyThreshold) returns (Kinova.Api.Common.Empty); //@RPC_ID=17
    
    //Configures the specified safety (i.e. sets error and warning thresholds)
    rpc SetSafetyConfiguration (SafetyConfiguration) returns (Kinova.Api.Common.Empty); //@RPC_ID=18
    
    //Retrieves configuration about the specified safety
    rpc GetSafetyConfiguration (Kinova.Api.Common.SafetyHandle) returns (SafetyConfiguration); //@RPC_ID=19
    
    //Retrieves information about the specified safety
    rpc GetSafetyInformation (Kinova.Api.Common.SafetyHandle) returns (SafetyInformation); //@RPC_ID=20
    
    //Indicates if specified safety is enabled (or disabled)
    rpc GetSafetyEnable (Kinova.Api.Common.SafetyHandle) returns (SafetyEnable); //@RPC_ID=21
    
    //Indicates if the specified safety is raised
    rpc GetSafetyStatus (Kinova.Api.Common.SafetyHandle) returns (SafetyStatus); //@RPC_ID=22
    
    //Clear all safety status for this device if they are no longer raised
    rpc ClearAllSafetyStatus (Kinova.Api.Common.Empty) returns (Kinova.Api.Common.Empty); //@RPC_ID=23    

    //Clear a specific safety status if it is no longer raised
    rpc ClearSafetyStatus (Kinova.Api.Common.SafetyHandle) returns (Kinova.Api.Common.Empty); //@RPC_ID=24
    
    //Gets configuration on every safeties
    rpc GetAllSafetyConfiguration (Kinova.Api.Common.Empty) returns (SafetyConfigurationList); //@RPC_ID=25
    
    //Gets information on every safeties
    rpc GetAllSafetyInformation (Kinova.Api.Common.Empty) returns (SafetyInformationList); //@RPC_ID=26
    
    //Puts back all safety configuration to factory defaults 
    rpc ResetSafetyDefaults (Kinova.Api.Common.Empty) returns (Kinova.Api.Common.Empty); //@RPC_ID=27
    
    //Subscribes to safety notifications
    rpc SafetyTopic (Kinova.Api.Common.NotificationOptions) returns (Kinova.Api.Common.NotificationHandle); //@RPC_ID=28 @PUB_SUB=Kinova.Api.Common.SafetyNotification
    
    // Sets the device model number (intented for Kinova Production)
    rpc SetModelNumber (ModelNumber) returns (Kinova.Api.Common.Empty); //@RPC_ID=29
    
    // Sets the device part number (intented for Kinova Production)
    rpc SetPartNumber (PartNumber) returns (Kinova.Api.Common.Empty); //@RPC_ID=30
    
    // Sets the device part number revision (intented for Kinova Production)
    rpc SetPartNumberRevision (PartNumberRevision) returns (Kinova.Api.Common.Empty); //@RPC_ID=31
    
    // Sets the device serial number (intented for Kinova Production)
    rpc SetSerialNumber (SerialNumber) returns (Kinova.Api.Common.Empty); //@RPC_ID=32
    
    // Sets the device MAC address (intented for Kinova Production)
    rpc SetMACAddress (MACAddress) returns (Kinova.Api.Common.Empty); //@RPC_ID=33
}

enum ServiceVersion {
    RESERVED_0 = 0;
    CURRENT_VERSION = 1;  // Current Version
}

/**
* Options for the run mode for the device
*/
enum RunModes {
    RUN_MODE           = 0;
    CALIBRATION_MODE   = 1; // calibration mode
    CONFIGURATION_MODE = 2; // configuration mode
    DEBUG_MODE         = 3; // debug mode
    TUNING_MODE        = 4; // tuning mode
}

/**
* Message specifying the device type
*/
message DeviceType {
    Kinova.Api.Common.DeviceTypes device_type = 1;             // Device type
}


/**
* Message specifying the run mode
*/
message RunMode {
    RunModes run_mode = 1;                   // Run mode
}

/**
* Message specifying the firmware version for the device
*/
message FirmwareVersion {
    uint32 firmware_version = 1;            // Firmware version
}

/**
* Message specifying the bootloader version for the device
*/
message BootloaderVersion {
    uint32 bootloader_version = 1;          // Bootloader version
}

/**
* Message specifying the model number for the device
*/
message ModelNumber {
    string model_number = 1;                // Model number of size 25 including null character
}

/**
* String specifiying the part number for the device
*/
message PartNumber {
    string part_number = 1;                 // Part number of size 25 including null character
}

/**
*  String specifying the serial number for the device
*/
message SerialNumber {
    string serial_number = 1;               // Serial number of size 25 including null character
}

/**
* MAC address for the device
*/
message MACAddress {
    bytes mac_address = 1;                  // MAC address
}

/**
* Message containing the IPv4 settings for the device, including address, subnet mask, and default gateway
*/
message IPv4Settings {
    uint32 ipv4_address         = 1;        // IPv4Address
    uint32 ipv4_subnet_mask     = 2;        // IPv4SubnetMask
    uint32 ipv4_default_gateway = 3;        // IPv4DefaultGateway
}

/**
* String specifying part number revision for the device
*/
message PartNumberRevision {
    string part_number_revision = 1;        // Part number revision
}

/**
* Result of power on self test
*/
message PowerOnSelfTestResult {
    uint32 power_on_self_test_result = 1;   // Power on self test result
}

/**
* Reboot request with bootloader delay
*/
message RebootRqst {
    uint32 delay = 1;                       // Bootloader delay
}

/**
 * Types of safeties limits
 */
enum SafetyLimitType {
    UNSPECIFIED_SAFETY_LIMIT_TYPE = 0;      
    MINIMAL_LIMIT = 1;                  // Safety that will kick in below a certain Minimum threshold (ex. Minimum temperature safety)
    MAXIMAL_LIMIT = 2;                  // Safety that will kick in above a certain Maximum threshold (ex. Maximum voltage safety)
    EVENT_LIMIT = 3;                    // Safety that will kick in in reaction to a specific event (ex. motor drive fault)

}

/**
 * Information about a particular safety
 */
message SafetyInformation {
    Kinova.Api.Common.SafetyHandle handle = 1;      // safety handle that this information is about
    bool can_change_safety_state = 2;               // true if related safety configuration can be modified
    bool has_warning_threshold = 3;                 // true if safety status can go in Warning 
    bool has_error_threshold = 4;                   // true if safety status can go in Error 
    SafetyLimitType limit_type = 5;                 // safety limit type
    float default_warning_threshold = 6;            // default warning threshold (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT and 'has_warning_threshold' is true)
    float default_error_threshold = 7;              // default error threshold (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT and 'has_error_threshold' is true)
    float upper_hard_limit = 8;                     // maximal threshold value (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT)
    float lower_hard_limit = 9;                     // minimal threshold value (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT)
    Kinova.Api.Common.SafetyStatusValue status = 11;// current Safety status
    Kinova.Api.Common.Unit unit = 12;               // Unit that the safety status is in
}

message SafetyInformationList {
    repeated SafetyInformation information = 1;
}

message SafetyEnable {
    Kinova.Api.Common.SafetyHandle handle = 1;
    bool enable = 2;
}

message SafetyThreshold {
    Kinova.Api.Common.SafetyHandle handle = 1;
    float value = 2;
}

message SafetyConfiguration {
    Kinova.Api.Common.SafetyHandle handle = 1;
    float error_threshold = 2;
    float warning_threshold = 3;
    SafetyEnable enable = 4;
}

message SafetyConfigurationList {
    repeated SafetyConfiguration configuration = 1;
}

message SafetyStatus {
    Kinova.Api.Common.SafetyStatusValue value = 1;
}

